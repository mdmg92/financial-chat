@page "/ChatRoom"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject ChatClient ChatClient
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using FinancialChat.Blazor.Models

@if (!_isChatting)
{
    <AuthorizeView>
        <Authorized>
            Hello, @context.User.Identity.Name!
            <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
        </Authorized>
        <NotAuthorized>
            <a href="Identity/Account/login">Log in</a>
        </NotAuthorized>
    </AuthorizeView>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Text</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Text</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code {
    private bool _isChatting = false;
    private string _username;
    private string _message;
    private string _newMessage;
    private List<Message> _messages = new List<Message>();
    private string _hubUrl;
    private HubConnection _hubConnection;
    private ClaimsPrincipal _user;

    public async Task Chat()
    {
        await _setUser();
        if (string.IsNullOrEmpty(_user.Identity?.Name))
        {
            Console.WriteLine("User null");
            _message = "Please login";
            return;
        }

        _username = _user.Identity?.Name;

        try
        {
            _isChatting = true;
            await Task.Delay(1);

            await GetMessages();

            var _hubUrl = Configuration.GetConnectionString("ChatApi") + "chat";

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined the chat");
        }
        catch (Exception ex)
        {
            _message = $"ERROR: Failed to start chat client {ex.Message}";
            _isChatting = false;
        }
    }

    private async Task GetMessages()
    {
        _messages.Clear();
        _messages = (await ChatClient.GetMessages()).ToList();
    }

    private void BroadcastMessage(string name, string message)
    {
        var isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        if (_messages.Count == 50)
        {
            _messages.RemoveAt(_message.Length - 1);
        }

        _messages.Add(new Message(name, message, isMine));

        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left the chat");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrEmpty(message))
        {
            await ChatClient.SendMesage(new Message(_username, message, true));

            _newMessage = string.Empty;
        }
    }

    private async Task _setUser()
    {
        if (_user is null)
        {
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = state.User;

            _user = user;
        }
    }
}